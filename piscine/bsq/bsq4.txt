#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "ft_boolean.h"

#define BUF_SIZE 1024*1024

typedef struct s_character
{
    char    empty;
    char    obstacle;
    char    full;
}            t_character;

typedef struct s_matrix
{
    int        row;
    int        col;
    int        rows;
    int        cols;
    int        opt_row;
    int        opt_col;
    int        max;
}            t_matrix;

typedef struct s_input
{
    int        fd;
    char    buffer[BUF_SIZE];
    int        bytes_read;
}            t_input;

typedef struct s_table
{
    char        *map_start;
    char        **map;
    int        **dp;
}            t_table;

int min(int a, int b)
{
    if (a < b)
        return (a);
    else
        return (b);
}

t_bool input_error(int argc)
{
    if (argc != 2)
    {
        write(2, "Usage: ./program filename\n", 26);
        return (1);
    }
    else
        return (0);
}

t_bool open_error(t_input input)
{
    if (input.fd == -1)
    {
        write(2, "Error: cannot open file\n", 24);
        return (1);
    }
    else
        return (0);
}

t_bool byte_error(t_input input)
{
    if (input.bytes_read == -1)
    {
        write(2, "Error: cannot read file\n", 24);
        close(input.fd);
        return (1);
    }
    else
        return (0);
}

t_bool corr_error(t_character character)
{
    if (character.empty == character.obstacle
        || character.obstacle == character.full
        || character.full == character.empty)
    {
        write(2, "b table.map error\n", 18);
        return (1);
    }
    else
        return (0);
}

t_bool num_error(char buffer)
{
    if (!(buffer >= '0' && buffer <= '9'))
    {
        write(2, "a table.map error\n", 18);
        return (1);
    }
    else
        return (0);
}

t_bool col_error(char **map, t_matrix matrix)
{
    if (matrix.col != matrix.cols)
    {
        write(2, "c table.map error\n", 18);
        free(map);
        return (1);
    }
    else
        return (0);
}

t_bool row_error(t_matrix matrix, char **map)
{
    if (matrix.row + 1 != matrix.rows)
    {
        write(2, "e table.map error\n", 18);
        free(map);
        return (1);
    }
    else
        return (0);
}

t_bool get_char(t_input input, t_matrix *matrix, t_character *character,
        char **map_start)
{
    int    i;

    i = 0;
    matrix->rows = 0;
    while (input.buffer[i + 3] != '\n')
    {
        if (num_error(input.buffer[i]))
            return (1);
        matrix->rows = matrix->rows * 10 + (input.buffer[i] - '0');
        i++;
    }
    character->empty = input.buffer[i++];
    character->obstacle = input.buffer[i++];
    character->full = input.buffer[i++];
    *map_start = input.buffer;
    *map_start += i + 1;
    return (0);
}

t_bool map_error(char **map, t_matrix matrix, t_character character)
{
    if (map[matrix.row][matrix.col] != character.empty
        && map[matrix.row][matrix.col] != character.obstacle)
    {
        write(2, "d table.map error\n", 18);
        return (1);
    }
    else
        return (0);
}

t_bool get_map(char *map_start, char ***map, t_matrix matrix,
        t_character character)
{
    *map = (char **)malloc(matrix.rows * sizeof(char *));
    for (int i = 0; i < matrix.rows; i++)
        (*map)[i] = (char *)malloc((matrix.cols + 1) * sizeof(char));

    matrix.row = 0;
    matrix.col = 0;
    for (int i = 0; map_start[i] != '\0' && i < matrix.rows*(matrix.cols+1); i++)
    {
        printf("%d ", matrix.row);
        printf("%d\n", matrix.col);
        if (map_start[i] == '\n')
        {
            (*map)[matrix.row][matrix.col] = '\0';
            if (col_error(*map, matrix))
                return (1);
            matrix.row++;
            matrix.col = 0;
        }
        else
        {
            (*map)[matrix.row][matrix.col] = map_start[i];
            if (map_error(*map, matrix, character))
                return (1);
            matrix.col++;
        }
    }
    return (0);
}

void dynamic_programming(int **dp, t_matrix *matrix, char **map, t_character character)
{
    // Initialize dp array
    for (int i = 0; i < matrix->rows; i++)
        for (int j = 0; j < matrix->cols; j++)
            dp[i][j] = 0;

    // Initialize first row and first column
    for (int i = 0; i < matrix->rows; i++)
        dp[i][0] = (map[i][0] == character.empty) ? 1 : 0;
    for (int j = 0; j < matrix->cols; j++)
        dp[0][j] = (map[0][j] == character.empty) ? 1 : 0;

    // Fill the dp table using dynamic programming
    for (int i = 1; i < matrix->rows; i++)
    {
        for (int j = 1; j < matrix->cols; j++)
        {
            if (map[i][j] == character.empty)
            {
                dp[i][j] = min(dp[i - 1][j-1], min(dp[i][j - 1], dp[i - 1][j])) + 1;
                if (matrix->max < dp[i][j])
                {
                    matrix->max = dp[i][j];
                    matrix->opt_row = i;
                    matrix->opt_col = j;
                }
            }
            else
                dp[i][j] = 0;
        }
    }
}

void draw_map(t_matrix matrix, t_character character, char **map)
{
	int i;
	int j;

	i = 0;
	j = 0;
    while(i < matrix.max)
    {
        while(j < matrix.max)
        {
            map[matrix.opt_row-i-1][matrix.opt_col-j-1] = character.full;
            j++;
        }
        i++;
    }
}

int main(int argc, char *argv[])
{
    t_input        input;
    t_matrix    matrix;
    t_character    character;
    t_table        table;

    matrix.row = 0;
    matrix.col = 0;
    matrix.max = 0; // maxを初期化
    table.map_start = NULL;
    if (input_error(argc))
        return (1);
    input.fd = open(argv[1], O_RDONLY);
    if (open_error(input))
        return (1);
    input.bytes_read = read(input.fd, input.buffer, BUF_SIZE - 1);
    if (byte_error(input))
        return (1);
    close(input.fd);
    input.buffer[input.bytes_read] = '\0';
    if (get_char(input, &matrix, &character, &table.map_start))
        return (1);
    if (corr_error(character))
        return (1);
    matrix.cols = 0;
    while (table.map_start[matrix.cols] != '\n' && table.map_start[matrix.cols] != '\0')
        matrix.cols++;
    if (get_map(table.map_start, &table.map, matrix, character))
        return (1);

    // Allocate memory for dp array
    table.dp = (int **)malloc(matrix.rows * sizeof(int *));
    for (int i = 0; i < matrix.rows; i++)
        table.dp[i] = (int *)malloc(matrix.cols * sizeof(int));

    dynamic_programming(table.dp, &matrix, table.map, character);
    draw_map(matrix, character, table.map);
    printf("%d\n", matrix.max);
    printf("%d\n", matrix.opt_row);
    printf("%d\n", matrix.opt_col);
    // Print the dynamic programming table (for debug)
    for (int i = 0; i < matrix.rows; i++)
    {
        for (int j = 0; j < matrix.cols; j++)
        {
            printf("%c ", table.map[i][j]);
        }
        printf("%s", "\n");
    }
	

    // Free memory
    for (int i = 0; i < matrix.rows; i++)
        free(table.map[i]);
    free(table.map);

    return (0);
}